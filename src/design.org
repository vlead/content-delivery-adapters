#+TITLE: Design of Virtual Labs platform
#+AUTHOR: VLEAD
#+DATE: [2016-11-08 Tue]
#+SETUPFILE: ./org-templates/level-0.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil


* Introduction 
  This document provides the high level design of the
  Virtual Labs platform.


* Design
  The design of the platform flows from this diagram.
#+html: <img src="https://docs.google.com/drawings/d/e/2PACX-1vTEiwPdyaMR3h9jmGLwbHYLZ1ajJQN2G9u1K5OXx3c8MjsOQbNrS8njjxLiMSSHsE45QExAuPOttC4F/pub?w=967&h=708">
#+html:  <p align="center"> Platform with Content Server </p>

  Click [[https://docs.google.com/drawings/d/1s_expWC1QOMXOHgLJHW40OB04FvJt--1vwpSVjhdoGY/edit?ts=5834280f][=here=]] to edit the image.


* Specification as the starting point
*** As an identifier
    Every experiment and a lab has a specification.  The
    specification provides a unique ID, name, and other meta
    information about the contents of an experiment.

*** Creation 
    An experiment author works with VLEAD or via other
    proposed process to obtain/finalize the specification.
    This process assigns a unique id to the specification.
    Once finalized, the specification gets pushed to
    [[https://github.com/vlead/lab-specifications][specifications]] repository.  The process of creation of a
    specification can be automated using a web gui. The lab
    data service [[https://github.com/vlead/lab-data-service-dashboard][dashboard]] provides the web interface for
    the creation of a specification.  The [[https://github.com/vlead/lab-data-service-dashboard/issues/26][evolution]] of this
    dashboard is geared to meet this functionality.

*** The growth of specification
    The specification grows during the lifetime of an
    experiment.  It is conceived when an experiment
    developer initiates the creation of an experiment.
    Other data like it's deployment url gets updated by the
    service that deploys the experiment.

** Experiment Specification  
   An experiment is a basic functional unit of virtual labs.
   An experiment is a combination of static content and
   simulation.  Each experiment is identified by a unique
   id, name, overview, list of sections and the markup
   language used to write the content for the experiment.

   #+BEGIN_EXAMPLE
   {
   "experiment": {
      "id": "e99847",
      "name": "Parallel and distributed processing",
      "overview": "This deals with eliciting how parallel and distributed processing is done",
      "sections": [
        "Introduction",
        "Objective",
        "Tutorial",
        "Illustration",
        "Procedure",
        "Simulation",
        "Observations",
        "Assignment",
        "References"
      ]
    },
    "content-type": "org"
   }
   #+END_EXAMPLE

** Lab Specification
   A lab is a collation of experiments.  A lab is identified
   by a unique id.  The lab specification contains this
   identifier along with name, overview, a list of sections
   where the list of experiments is one of the sections.
   The experiments are specified by their unique ids.

   #+BEGIN_EXAMPLE
   {
     "lab": {
       "id": "cse02",
       "name": "Computer Programming",
       "overview": "This lab deals with computer programming",
       "sections": [
         {
           "name": "Introduction"
         },
         {
           "experiments": [
             "e100",
             "e200"
           ]
         }
       ]
     },
     "content-type": "org"
   }
   #+END_EXAMPLE
    

* Creation of a repository from a specification
  When a new specification is committed to the
  [[https://github.com/vlead/lab-specifications][specifications]] repository, a corresponding repository for
  that specification is created.  When an existing
  specification is updated, the corresponding repository is
  updated.

  The repository holds files in the markup (md or org)
  format specified in the specification. The list of files
  correspond to the sections in the repository.

  The directory and file structure of the created repo is
  given below.

  #+BEGIN_EXAMPLE
  
  #+END_EXAMPLE

  A [[https://github.com/vlead/translators][repository]] is created to realize this functionality.

** Process
   An experiment or a lab developer 


** Resource to ID Mapper
   Given an experiment id, resource ids are generated and
   mapped to each resource.  This map is in json format.

   Microservice LDS provides the API that returns this
   mapping. The input to the API is the id of the
   experiment, here in this example it is =e99847= and
   output is the resource to id map.

   #+BEGIN_EXAMPLE
   {
     "experiment_resource_map": {
       "name": "e99847-name",
       "overview": "e99847-overview",
       "Introduction" : "e99847-intro",
       "Objective"  : "e99847-objective",
       "Tutorial"   : "e99847-tutorial",
       "Illustration" : "e99847-illustration",
       "Procedure"    : "e99847-procedure",
       "Experiment"   : "e99847-experiment",
       "Observations" : "e99847-observations",
       "Assignment"   : "e99847-assignment",
       "References"   : "e99847-references"
     }
   }   
   #+END_EXAMPLE

** Generate html files from a github repo containing either org/md files
   Whenever an experiment repository is tagged or committed
   on master branch, an API call is made to a service which
   builds the repository.  Building of repository ensures
   all the files in a markup language (here either in md or
   org) are converted to html.


* Adapter
  From every specification an experiment is generated.  This
  experiment can be run from a browser.  When this
  experiment is generated, entire content of the experiment
  is not placed.  Instead, handlers are attached to the
  events on each of the sections in the experiment.  This
  means a handler to fetch the content of =Introduction= is
  attached for the click event on the =Introduction=
  section.  Similarly, for other sections like the
  simulation, etc.

  The handlers that are attached make ajax calls to
  =adapter= service with the payload identifying the
  resource.  It is the responsibility of the adapter to
  fetch the content from content-server using the resource
  id.

  By having an intermediary -- adapter -- between the server
  that holds the content and the browser that displays the
  content, the following advantages can be gained:
  1. Application of styles from a configuration,
  2. Insertion or deletion of calls to platform services.
     This translates to a scenario where infrastructure for
     collecting telemetry could be inserted. 

* Build the experiment from fragments
  An experiment when built is broken into multiple
  addressable fragments.  An experiment when viewed is
  assembled from these fragments. 

  Some of the challenges that arise are: how is the fidelity
  maintained between the styles applied while building the
  content; and while rendering the content.  

  [[http://orgmode.org/manual/Publishing.html][org-publish]] converts org documents to html pages.  [[https://pandoc.org/][Pandoc]]
  converts documents written in one markup language to
  another.  But since a document is broken down to
  fragments, should a service build these fragments while
  rendering.

  



